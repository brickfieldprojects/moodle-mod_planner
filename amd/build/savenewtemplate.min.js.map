{"version":3,"file":"savenewtemplate.min.js","sources":["../src/savenewtemplate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Creates the modal for the saving a new template.\n *\n * @author      Jay Churchward <jay@brickfieldlabs.ie>\n * @copyright   2021 Brickfield Education Labs <jay@brickfieldlabs.ie>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalSaveNewTemplate from './modal_save_new_template';\nimport PlannerEvents from './events';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from \"core/ajax\";\nimport Notification from \"core/notification\";\n\n/**\n * Register event listeners for the module.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const trigger = e.target.closest('#id_savenewtemplate');\n        if (trigger) {\n            e.preventDefault();\n\n            show(trigger, { focusOnClose: e.target });\n        }\n    });\n};\n\n/**\n * Shows the save new template modal.\n *\n * @param {HTMLElement} focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async ({ focusOnClose = null } = {}) => {\n    const modal = await ModalFactory.create({ type: ModalSaveNewTemplate.TYPE });\n\n    modal.show();\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-line\n        }\n    });\n\n    modal.getRoot().on(PlannerEvents.savenewtemplate, () => {\n        // Get value from input field.\n        const templateName = document.getElementById('newTemplateName').value;\n        const disclaimer = document.getElementById('id_disclaimereditable').innerHTML;\n        const stepName = [];\n        const stepAllocation = [];\n        const stepDescription = [];\n        const names = document.querySelectorAll('[selector=\"planner_stepname\"]');\n        const allocs = document.querySelectorAll('[selector=\"planner_stepallocation\"]');\n        for (let i = 0; i < names.length; i++) {\n            stepName.push(names[i].value);\n            stepAllocation.push(allocs[i].value);\n            stepDescription.push(document.getElementById('id_stepdescription_' + i + 'editable').innerHTML);\n        }\n        Ajax.call([{\n            methodname: 'mod_planner_save_new_template',\n            args: {\n                name: templateName,\n                disclaimer: disclaimer,\n                personal: isPersonal,\n                stepname: stepName,\n                stepallocation: stepAllocation,\n                stepdescription: stepDescription,\n                optionrepeats: names.length,\n            },\n            fail: Notification.exception,\n        }]);\n    });\n};\n\n/**\n * Set up the save new template actions.\n * @param {string} personal Whether the template is personal or global.\n */\nexport const init = (personal) => {\n    isPersonal = personal;\n    if (!init.initialised) {\n        // Event listeners should only be registered once.\n        init.initialised = true;\n        registerEventListeners();\n    }\n};\n\n/**\n * Whether the template is global or personal.\n */\nlet isPersonal = '';\n\n/**\n * Whether the init function was called before.\n *\n * @static\n * @type {boolean}\n */\ninit.initialised = false;"],"names":["show","async","focusOnClose","modal","ModalFactory","create","type","ModalSaveNewTemplate","TYPE","getRoot","on","ModalEvents","hidden","destroy","focus","e","PlannerEvents","savenewtemplate","templateName","document","getElementById","value","disclaimer","innerHTML","stepName","stepAllocation","stepDescription","names","querySelectorAll","allocs","i","length","push","call","methodname","args","name","personal","isPersonal","stepname","stepallocation","stepdescription","optionrepeats","fail","Notification","exception","init","initialised","addEventListener","trigger","target","closest","preventDefault"],"mappings":";;;;;;;4YAiDMA,KAAOC,qBAAOC,aAAEA,aAAe,6DAAS,SACpCC,YAAcC,uBAAaC,OAAO,CAAEC,KAAMC,iCAAqBC,OAErEL,MAAMH,OAENG,MAAMM,UAAUC,GAAGC,sBAAYC,QAAQ,KAEnCT,MAAMU,cAEFX,aAAaY,QACf,MAAOC,QAKbZ,MAAMM,UAAUC,GAAGM,gBAAcC,iBAAiB,WAExCC,aAAeC,SAASC,eAAe,mBAAmBC,MAC1DC,WAAaH,SAASC,eAAe,yBAAyBG,UAC9DC,SAAW,GACXC,eAAiB,GACjBC,gBAAkB,GAClBC,MAAQR,SAASS,iBAAiB,iCAClCC,OAASV,SAASS,iBAAiB,2CACpC,IAAIE,EAAI,EAAGA,EAAIH,MAAMI,OAAQD,IAC9BN,SAASQ,KAAKL,MAAMG,GAAGT,OACvBI,eAAeO,KAAKH,OAAOC,GAAGT,OAC9BK,gBAAgBM,KAAKb,SAASC,eAAe,sBAAwBU,EAAI,YAAYP,yBAEpFU,KAAK,CAAC,CACPC,WAAY,gCACZC,KAAM,CACFC,KAAMlB,aACNI,WAAYA,WACZe,SAAUC,WACVC,SAAUf,SACVgB,eAAgBf,eAChBgB,gBAAiBf,gBACjBgB,cAAef,MAAMI,QAEzBY,KAAMC,sBAAaC,iBASlBC,KAAQT,WACjBC,WAAaD,SACRS,KAAKC,cAEND,KAAKC,aAAc,EApEvB5B,SAAS6B,iBAAiB,SAASjC,UACzBkC,QAAUlC,EAAEmC,OAAOC,QAAQ,uBAC7BF,UACAlC,EAAEqC,iBAEFpD,KAAKiD,QAAS,CAAE/C,aAAca,EAAEmC,sCAuExCZ,WAAa,GAQjBQ,KAAKC,aAAc"}